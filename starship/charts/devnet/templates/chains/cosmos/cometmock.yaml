{{- range $chain := .Values.chains }}
{{- if not (hasPrefix "ethereum" $chain.name) }}
{{ $dataExposer := dict "chain" $chain.id "port" ($.Values.exposer.ports.rest | quote | default "8081") }}
{{ $defaultFile := $.Files.Get "defaults.yaml" | fromYaml }}

{{ $chain := include "devnet.fullchain" (dict "name" $chain.id "file" $defaultFile "context" $) | fromJson }}

{{- if ($chain.cometmock.enabled) }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ $chain.hostname }}-cometmock
  labels:
    app.kubernetes.io/name: {{ $chain.id }}-cometmock
spec:
  clusterIP: None
  ports:
    - name: rpc
      port: 22331
      protocol: TCP
      targetPort: 22331
  selector:
    app.kubernetes.io/name: {{ $chain.id }}-cometmock
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $chain.hostname }}-cometmock
spec:
  serviceName: {{ $chain.hostname }}-cometmock
  replicas: 1
  revisionHistoryLimit: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ $chain.name }}
      app.kubernetes.io/name: {{ $chain.id }}-cometmock
  template:
    metadata:
      annotations:
        quality: release
        role: api-gateway
        sla: high
        tier: gateway
      labels:
        app.kubernetes.io/instance: {{ $chain.name }}
        app.kubernetes.io/type: cometmock
        app.kubernetes.io/name: {{ $chain.id }}-cometmock
        app.kubernetes.io/rawname: {{ $chain.id }}-cometmock
        app.kubernetes.io/version: {{ $.Chart.AppVersion }}
    spec:
      {{- include "imagePullSecrets" $chain | indent 6 }}
      initContainers:
        {{- if gt $chain.numValidators 1.0}}
        - name: init-validator
          image: {{ $chain.image }}
          imagePullPolicy: {{ $.Values.images.imagePullPolicy }}
          env:
            {{- include "devnet.defaultEvnVars" $chain | indent 12 }}
            {{- include "devnet.evnVars" $chain | indent 12 }}
            {{- include "devnet.genesisVars" $dataExposer | indent 12 }}
            - name: KEYS_CONFIG
              value: /configs/keys.json
          command:
            - bash
            - "-c"
            - |
              {{- if gt $chain.numValidators 1.0}}
              for i in $(seq 0 {{ sub $chain.numValidators 2 }});
              do
                mkdir -p /chain/validator-$i/config /chain/validator-$i/data
                VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
                echo "Adding validator key.... $VAL_KEY_NAME"
                jq -r ".validators[0].mnemonic" $KEYS_CONFIG | $CHAIN_BIN keys add $VAL_KEY_NAME --index $i --recover --keyring-backend="test" --home /chain/validator-$i
              done
              {{- end }}
          resources: {{- include "devnet.node.resources" ( dict "node" $chain "context" $ ) | trim | nindent 12 }}
          volumeMounts:
            - mountPath: /chain
              name: node
            - mountPath: /scripts
              name: scripts
            - mountPath: /configs
              name: addresses
        {{- end }}
        - name: init-wait
          image: "curlimages/curl"
          imagePullPolicy: {{ $.Values.images.imagePullPolicy }}
          env:
            - name: GENESIS_PORT
              value: "8081"
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          command:
            - /bin/sh
            - "-c"
            - |
              while [ $(curl -sw '%{http_code}' http://{{ $chain.hostname }}-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/priv_keys -o /dev/null) -ne 200 ]; do
                echo "Genesis validator does not seem to be ready for: {{ $chain.id }}. Waiting for it to start..."
                echo "Checking: http://{{ $chain.hostname }}-genesis.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/priv_keys"
                sleep 10;
              done
              {{- if gt $chain.numValidators 1.0}}
              for i in $(seq 0 {{ sub $chain.numValidators 2 }});
              do
                while [ $(curl -sw '%{http_code}' http://{{ $chain.hostname }}-validator-$i.{{ $chain.hostname }}-validator.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/priv_keys -o /dev/null) -ne 200 ]; do
                  echo "Validator does not seem to be ready for: {{ $chain.id }} validator-$i. Waiting for it to start..."
                  echo "Checking: http://{{ $chain.hostname }}-validator-$i.{{ $chain.hostname }}-validator.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/priv_keys"
                  sleep 10;
                done
              done
              {{- end }}
              echo "Ready to start"
              exit 0
          resources:
          {{- include "getResourceObject" $.Values.resources.wait | indent 12 }}
        - name: init-comet
          image: {{ $chain.cometmock.image }}
          imagePullPolicy: {{ $.Values.images.imagePullPolicy }}
          env:
            {{- include "devnet.defaultEvnVars" $chain | indent 12 }}
            {{- include "devnet.evnVars" $chain | indent 12 }}
            {{- include "devnet.genesisVars" $dataExposer | indent 12 }}
            {{- include "devnet.timeoutVars" $.Values | indent 12 }}
          command:
            - bash
            - "-c"
            - |
              mkdir -p /chain/genesis/config
              mkdir -p /chain/genesis/data
              curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/genesis -o /chain/genesis/config/genesis.json
              echo "Genesis file that we got....."
              cat /chain/genesis/config/genesis.json

              ## fetch priv_validator and priv_validator_state of all validators
              curl http://$GENESIS_HOST.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/priv_keys -o /chain/genesis/config/priv_validator_key.json
              echo '{"height":"0","round":0,"step":0}' > /chain/genesis/data/priv_validator_state.json

              {{- if gt $chain.numValidators 1.0}}
              for i in $(seq 0 {{ sub $chain.numValidators 2 }});
              do
                mkdir -p /chain/validator-$i/config
                mkdir -p /chain/validator-$i/data
                curl http://{{ $chain.hostname }}-validator-$i.{{ $chain.hostname }}-validator.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/node_key -o /chain/validator-$i/config/node_key.json
                curl http://{{ $chain.hostname }}-validator-$i.{{ $chain.hostname }}-validator.$NAMESPACE.svc.cluster.local:$GENESIS_PORT/priv_keys -o /chain/validator-$i/config/priv_validator_key.json
                echo '{"height":"0","round":0,"step":0}' > /chain/validator-$i/data/priv_validator_state.json
              done
              {{- end }}

              echo "copy cometmock binary to shared dir"
              cp /usr/local/bin/cometmock /chain/cometmock
          resources: {{- include "devnet.node.resources" ( dict "node" $chain "context" $ ) | trim | nindent 12 }}
          volumeMounts:
            - mountPath: /chain
              name: node
            - mountPath: /scripts
              name: scripts
            - mountPath: /configs
              name: addresses
      containers:
        - name: comet
          image: {{ $chain.image }}
          imagePullPolicy: {{ $.Values.images.imagePullPolicy }}
          env:
            {{- include "devnet.defaultEvnVars" $chain | indent 12 }}
            {{- include "devnet.evnVars" $chain | indent 12 }}
            {{- include "devnet.genesisVars" $dataExposer | indent 12 }}
            - name: KEYS_CONFIG
              value: /configs/keys.json
          command:
            - bash
            - "-c"
            - |
              NODE_LISTEN_ADDR_STR="tcp://{{ $chain.hostname }}-genesis.$NAMESPACE.svc.cluster.local:26658"
              NODE_HOME_STR="/chain/genesis"

              {{- if gt $chain.numValidators 1.0}}
              for i in $(seq 0 {{ sub $chain.numValidators 2 }});
              do
                NODE_LISTEN_ADDR_STR="tcp://{{ $chain.hostname }}-validator-$i.{{ $chain.hostname }}-validator.$NAMESPACE.svc.cluster.local:26658,$NODE_LISTEN_ADDR_STR"
                NODE_HOME_STR="/chain/validator-$i,$NODE_HOME_STR"
              done
              {{- end }}
              /chain/cometmock --block-time={{ $.Values.timeouts.timeout_commit | replace "ms" "" }} $NODE_LISTEN_ADDR_STR /chain/genesis/config/genesis.json tcp://0.0.0.0:22331 $NODE_HOME_STR grpc
          {{- if gt $chain.numValidators 1.0}}
          lifecycle:
            postStart:
              exec:
                command:
                  - bash
                  - "-c"
                  - "-e"
                  - |
                    set -eux

                    sleep 10

                    {{- if gt $chain.numValidators 1.0}}
                    for i in $(seq 0 {{ sub $chain.numValidators 2 }});
                    do
                      $CHAIN_BIN keys list --keyring-backend test --home /chain/validator-$i --output json | jq
                      VAL_KEY_NAME="$(jq -r '.validators[0].name' $KEYS_CONFIG)-$i"
                      echo "Create validator.... $VAL_KEY_NAME"
                      VAL_NAME=$VAL_KEY_NAME \
                        NODE_URL="http://0.0.0.0:22331" \
                        NODE_ARGS="--home /chain/validator-$i" \
                        GAS="1000000" \
                        bash -e /scripts/create-validator.sh
                    done
                    {{- end }}
          {{- end }}
          resources: {{- include "devnet.node.resources" ( dict "node" $chain "context" $ ) | trim | nindent 12 }}
          volumeMounts:
            - mountPath: /chain
              name: node
            - mountPath: /scripts
              name: scripts
            - mountPath: /configs
              name: addresses
          readinessProbe:
            httpGet:
              path: /status
              port: 22331
            initialDelaySeconds: 10
            periodSeconds: 10
      volumes:
        - name: node
          emptyDir: { }
        - name: addresses
          configMap:
            name: keys
        - name: scripts
          configMap:
            name: setup-scripts-{{ $chain.hostname }}
---
{{- end }}
{{- end }}
{{- end }}
